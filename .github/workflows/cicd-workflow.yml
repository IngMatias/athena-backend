name: CICD

on:
  push:
    branches:
      - main

env:
  DOCKER_HUB_USERNAME: matiashernandez99
  DOCKER_HUB_REPOSITORY: matiashernandez99/athena-backend
  DOCKER_HUB_TAG: latest
  DOCKER_CONTAINER_NAME: athena-backend

jobs:
  push-docker-image:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        run: docker login -u $DOCKER_HUB_USERNAME -p ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build Docker image
        run: docker build -t $DOCKER_HUB_REPOSITORY:$DOCKER_HUB_TAG .

      - name: Push Docker image to Docker Hub
        run: docker push $DOCKER_HUB_REPOSITORY:$DOCKER_HUB_TAG

  build-and-deploy:
    needs: push-docker-image
    runs-on: ubuntu-latest
    steps:
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          printf "%s\n" "${{ secrets.AWS_SSH_KEY }}" > ~/.ssh/id_rsa
          cat ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.AWS_EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Update EC2
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.AWS_EC2_USER }}@${{ secrets.AWS_EC2_HOST }} << EOF
            sudo yum update -y
            sudo yum install -y docker
            sudo service docker start
            sudo usermod -a -G docker ec2-user
          EOF
          
      - name: Setup Docker Network
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.AWS_EC2_USER }}@${{ secrets.AWS_EC2_HOST }} << 'EOF'
            if ! docker network inspect my-network >/dev/null 2>&1; then
              echo "Creating Docker network 'my-network'..."
              docker network create my-network
            else
              echo "Docker network 'my-network' already exists."
            fi
          EOF

      - name: Chroma
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.AWS_EC2_USER }}@${{ secrets.AWS_EC2_HOST }} << EOF
            docker pull chromadb/chroma:latest
            docker stop chroma || true
            docker rm chroma || true
            docker run -d --name chroma -p 8000:8000 --network my-network chromadb/chroma:latest
          EOF

      - name: Mongo
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.AWS_EC2_USER }}@${{ secrets.AWS_EC2_HOST }} << EOF
            docker pull mongo:latest
            docker stop mongo || true
            docker rm mongo || true
            docker run -d --name mongo -p 27017:27017 --network my-network -e MONGO_INITDB_ROOT_USERNAME=${{ secrets.MONGO_USERNAME }} -e MONGO_INITDB_ROOT_PASSWORD=${{ secrets.MONGO_PASSWORD }} mongo
          EOF

      - name: Postgres
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.AWS_EC2_USER }}@${{ secrets.AWS_EC2_HOST }} << EOF
            docker pull postgres:latest
            docker stop postgres || true
            docker rm postgres || true
            docker run -d --name postgres -p 5432:5432 --network my-network -e POSTGRES_USER=${{ secrets.POSTGRES_USERNAME }} -e POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} postgres
          EOF

      - name: Redis
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.AWS_EC2_USER }}@${{ secrets.AWS_EC2_HOST }} << EOF
            docker pull redis:latest
            docker stop redis || true
            docker rm redis || true
            docker run -d --name redis -p 6379:6379 --network my-network redis:latest redis-server --requirepass ${{ secrets.PASSWORD_REDIS }}
          EOF

      - name: Create .env file locally
        run: |
          echo "PORT=${{ secrets.PORT }}" > .env
          echo "URL_FRONTEND=${{ secrets.URL_FRONTEND }}" >> .env
          echo "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" >> .env
          echo "GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}" >> .env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
          echo "MAX_AGE_TOKEN=${{ secrets.MAX_AGE_TOKEN }}" >> .env
          echo "URL_AFTER_LOGIN=${{ secrets.URL_AFTER_LOGIN }}" >> .env
          echo "URL_AFTER_LOGOUT=${{ secrets.URL_AFTER_LOGOUT }}" >> .env
          echo "CHROMA_HOST=${{ secrets.CHROMA_HOST }}" >> .env
          echo "CHROMA_PORT=${{ secrets.CHROMA_PORT }}" >> .env
          echo "MONGO_HOST=${{ secrets.MONGO_HOST }}" >> .env
          echo "MONGO_PORT=${{ secrets.MONGO_PORT }}" >> .env
          echo "MONGO_USERNAME=${{ secrets.MONGO_USERNAME }}" >> .env
          echo "MONGO_PASSWORD=${{ secrets.MONGO_PASSWORD }}" >> .env
          echo "POSTGRES_HOST=${{ secrets.POSTGRES_HOST }}" >> .env
          echo "POSTGRES_PORT=${{ secrets.POSTGRES_PORT }}" >> .env
          echo "POSTGRES_USERNAME=${{ secrets.POSTGRES_USERNAME }}" >> .env
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
          echo "POSTGRES_URL=${{ secrets.POSTGRES_URL }}" >> .env
          echo "URL_REDIS=${{ secrets.URL_REDIS }}" >> .env
          echo "PORT_REDIS=${{ secrets.PORT_REDIS }}" >> .env
          echo "PASSWORD_REDIS=${{ secrets.PASSWORD_REDIS }}" >> .env
          echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> .env

      - name: Copy .env file to EC2
        run: |
          scp -o StrictHostKeyChecking=no .env ${{ secrets.AWS_EC2_USER }}@${{ secrets.AWS_EC2_HOST }}:~/.env

      - name: Deploy on EC2
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.AWS_EC2_USER }}@${{ secrets.AWS_EC2_HOST }} << EOF
            docker login -u $DOCKER_HUB_USERNAME -p ${{ secrets.DOCKER_HUB_TOKEN }}
            docker pull $DOCKER_HUB_REPOSITORY:$DOCKER_HUB_TAG
            docker stop $DOCKER_CONTAINER_NAME || true
            docker rm $DOCKER_CONTAINER_NAME || true
            docker run -d -p 80:3000 --network my-network --name $DOCKER_CONTAINER_NAME --env-file ~/.env $DOCKER_HUB_REPOSITORY:$DOCKER_HUB_TAG

            sleep 5
            curl --fail http://localhost/healthcheck || (echo "❌ Health check failed" && exit 1)
          EOF
